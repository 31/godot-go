/*------------------------------------------------------------------------------
//   This code was generated by template gdnative_wrapper.go.tmpl.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated. Any updates should be done in
//   "gdnative.go.tmpl" so they can be included in the generated
//   code.
//----------------------------------------------------------------------------*/
{{ $view := . -}}

package gdnative

// #include <godot/gdnative_interface.h>
// #include "gdnative_wrapper.gen.h"
// #include <stdint.h>
// #include <stdio.h>
// #include <stdlib.h>
import "C"
import (
	"unsafe"
)

// aliases
type Uint64T C.uint64_t
type Uint32T C.uint32_t
type Uint16T C.uint16_t
type Uint8T C.uint8_t
type Int32T C.int32_t
type Int16T C.int16_t
type Int8T C.int8_t
type Char C.char
type WcharT C.wchar_t
{{ range $i, $t := $view.CollectAliases -}}
	type {{ camelCase $t.Name }} C.{{ $t.Name }}
{{ end -}}

// enums
{{ range $i, $e := $view.CollectEnums -}}
type {{ $e.Name }} C.{{ $e.Name }}
const (
	{{ range $j, $v := $e.Values -}}
	{{ $v.Name }} {{ if eq $j 0 }}{{ $e.Name }}{{ end }} {{ with $z := (goEnumValue $v $j) -}} = {{ $z }} {{- end }}
	{{ end -}}
)
{{ end }}

// functions
{{ range $i, $f := $view.CollectFunctions -}}
	type {{ $f.Name }} C.{{ $f.Name }}
{{ end -}}

// structs
{{ range $i, $t := $view.CollectStructs -}}
	type {{ $t.Name }} C.{{ $t.Name }}
{{ end -}}

// struct functions
{{ range $i, $t := $view.CollectStructs -}}
	{{- $fns := $t.CollectFunctions -}}

	{{- if gt (len $fns) 0 -}}
		/* struct ({{ $i }}) {{ $t.Name }} */
		{{ range $j, $f := $fns -}}
			{{ $rt := goReturnType $f.ReturnType }}
			func {{ $t.Name }}_{{ $f.Name }}(p_struct *{{ $t.Name }}
				{{- range $j, $arg := $f.Arguments -}}
					, {{ $arg.Name }} {{ goArgumentType $arg.Type $arg.Name }}
				{{- end -}}
			) {{ $rt }} {
				arg0 := (*C.{{ $t.Name }})(p_struct) // {{ $t.Name }}
				{{ range $j, $arg := $f.Arguments -}}
					arg{{ add $j 1 }} := {{ cgoCastArgument $arg }} // {{ $arg.Type.String }}
				{{ end }}

				{{ if $rt }}ret := {{ end -}}
				C.cgo_{{ $t.Name }}_{{ $f.Name }}(arg0
					{{- range $j, $arg := $f.Arguments -}}
						, arg{{ add $j 1 }}
					{{- end -}}
				)

				{{ range $j, $arg := $f.Arguments -}}
					{{ cgoCleanUpArgument $arg (add $j 1) }}
				{{ end }}

				{{- if $rt }}

				// {{ $f.ReturnType.String }}
				return {{ cgoCastReturnType $f.ReturnType "ret" }}
				{{ end -}}
			}
		{{ end -}}
	{{ end -}}
{{ end -}}
